import java.util.Random;
import java.util.concurrent.TimeUnit;

import io.reactivex.Observable;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static void main(String[] args) {
        //System.out.println(new App().getGreeting());
        /* String[] str = {"hello Rx","one","two","three","four"};
        Observable.just(str)
        .subscribe( line -> {
          for ( int i = 0; i < line.length ; i++) {
            System.out.println(line[i]);
          }
        } ); */

        //getNumbers()
        //getRandomNumbers()
        //getRandomNumbersWithInterval()
        //.subscribe( line -> System.out.println(line) );
        getConcatmapRandomNumbersWithInterval()
        .blockingSubscribe( line -> System.out.println(line) );
    }

    public String getGreeting() {
        return "Hello world.";
    }

    public static io.reactivex.Observable<Integer> getNumbers(){
        return Observable.just(0,1,10,11);
    }

    public static io.reactivex.Observable<Integer> getRandomNumbers(){
        Random random = new Random();
        return Observable.just(0).map(newt -> random.nextInt(100));
    }

    public static io.reactivex.Observable<Integer> getRandomNumbersWithInterval(){
        Random random = new Random();
        return Observable.intervalRange(0,20,500,500,TimeUnit.MILLISECONDS)
                        .map(newt -> random.nextInt(100));
    }

    public static io.reactivex.Observable<Integer> getConcatmapRandomNumbersWithInterval(){
        Random random = new Random();
        return Observable.intervalRange(0,20,500,500,TimeUnit.MILLISECONDS)
                        .concatMap(newt -> 
                                Observable.just(random.nextInt(100))
                                    .delay(1000, TimeUnit.MILLISECONDS)
                        );
    }
}
